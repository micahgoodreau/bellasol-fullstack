{"version":3,"file":"main.js","mappings":"6OAAA,kCAEA,0CAEA,uCAGO,IAAMA,cAAN,MAAMA,cACXC,YAA6BC,YAAA,KAAAA,WAAAA,UAAyB,CAGtDC,UACE,OAAOC,KAAKF,WAAWC,SACzB,GAHA,qBAAC,WAAAE,KAAI,S,6HACa,mB,QAAA,IAAP,iBAAAC,SAAA,iBAAAA,SAAO,Y,wCAJPN,cAAa,qBADzB,WAAAO,c,wCAEoD,mB,QAAA,IAAV,cAAAC,YAAA,cAAAA,YAAU,aADxCR,eAAA,QAAAA,cAAAA,a,qLCPb,kCAEA,0CACA,uCACA,wCACA,+BAYO,IAAMS,UAAN,MAAMA,YAAAA,UAAS,qBAVrB,WAAAC,QAAO,CACNC,QAAS,CACP,eAAAC,kBAAkBC,QAAQ,CACxBC,UAAU,SAAAC,MAAKC,UAAW,KAAM,OAChCC,QAAS,CAAC,YAGdC,YAAa,CAAC,iBAAAlB,eACdmB,UAAW,CAAC,cAAAX,eAEDC,WAAA,QAAAA,UAAAA,S,sLCjBb,kCAIO,IAAMD,WAAN,MAAMA,WACXL,UACE,MAAO,CAAEiB,QAAS,kBACpB,GAHWZ,WAAU,qBADtB,WAAAa,eACYb,YAAA,QAAAA,WAAAA,U,8ICJb,8C,+GCAAc,OAAOC,QAAUC,QAAQ,iB,eCAzBF,OAAOC,QAAUC,QAAQ,e,eCAzBF,OAAOC,QAAUC,QAAQ,uB,eCAzBF,OAAOC,QAAUC,QAAQ,Q,cCAzBF,OAAOC,QAAUC,QAAQ,O,GCCrBC,yBAA2B,CAAC,EAGhC,SAASC,oBAAoBC,UAE5B,IAAIC,aAAeH,yBAAyBE,UAC5C,QAAqBE,IAAjBD,aACH,OAAOA,aAAaL,QAGrB,IAAID,OAASG,yBAAyBE,UAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,oBAAoBH,UAAUL,OAAQA,OAAOC,QAASG,qBAG/CJ,OAAOC,OACf,C,+JCjBA,kCACA,gCAEA,uCAEA,W,kDACE,MAAMQ,UAAY,OAAAC,YAAYC,OAAO,aAAAxB,WAErCsB,IAAIG,gBADiB,OAErB,MAAMC,KAAO,4ZAAYC,MAAQ,WAC3BL,IAAIM,OAAOF,MACjB,SAAAG,OAAOC,IACL,kDAAkDJ,WAEtD,G,CAEAK,E","sources":["webpack:///./src/app/app.controller.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.service.ts","webpack:///../../libs/api-interfaces/src/index.ts","webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///external commonjs \"@nestjs/serve-static\"","webpack:///external commonjs \"tslib\"","webpack:///external node-commonjs \"path\"","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\n\nimport { Message } from '@bellasol/api-interfaces';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('hello')\n  getData(): Message {\n    return this.appService.getData();\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'web'),\n      exclude: ['/api*']\n    })\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\nimport { Message } from '@bellasol/api-interfaces';\n\n@Injectable()\nexport class AppService {\n  getData(): Message {\n    return { message: 'Welcome to api!' };\n  }\n}\n","export * from './lib/api-interfaces';\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"tslib\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3333;\n  await app.listen(port);\n  Logger.log(\n    `ðŸš€ Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":["AppController","constructor","appService","getData","this","Get","Message","Controller","AppService","AppModule","Module","imports","ServeStaticModule","forRoot","rootPath","join","__dirname","exclude","controllers","providers","message","Injectable","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","app","NestFactory","create","setGlobalPrefix","port","PORT","listen","Logger","log","bootstrap"],"sourceRoot":""}